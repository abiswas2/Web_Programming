{"version":3,"sources":["components/HeaderComponent/HeaderComponent.js","services/eventUploadService.js","components/EventsFormComponent/EventsFormComponent.js","components/EventsComponent/EventsComponent.js","components/HomeComponent/HomeComponent.js","App.js","serviceWorker.js","index.js"],"names":["HeaderComponent","className","src","alt","to","UploadEventData","data","console","log","axios","post","then","res","statusText","EventsFormComponet","props","handleOnChange","e","target","name","value","files","setState","prevState","eventUploadObj","Object","assign","closeModal","state","bind","handleEvenFormSubmit","preventDefault","this","FormData","append","studentFile","onClick","id","onSubmit","eventName","htmlFor","onChange","form","type","accept","Component","Events","showFormState","showForm","location","eventDesc","openEventUploadModal","withRouter","Home","desc","toEvent","handleChange","handleChangeDesc","handleSubmit","event","history","push","pathname","App","routeToEvents","exact","path","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.aca784e0.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from 'react-router-dom';\nimport \"./HeaderComponent.css\";\n\nfunction HeaderComponent(){\n    return (\n        <header>\n            <div className=\"logo\">\n                <img src=\"./images/gsu-logo.png\" alt=\"logo\"></img>\n            </div>\n            <nav>\n                <ul>\n                    <li>\n                    <Link to=\"/eventHome\">Home</Link>\n                    </li>\n                    <li>\n                    <Link to=\"/about\">Events</Link>\n                    </li>\n                    <li>\n                    <Link to=\"/event-upload\">Event Upload</Link>\n                    </li>\n                </ul>\n            </nav>\n        </header>\n    )\n}\n\nexport default HeaderComponent;","import axios from \"axios\";\n\nfunction UploadEventData(data){\n    console.log(data);\n        axios.post(\"http://localhost:8000/upload\", data, { // receive two parameter endpoint url ,form data \n    })\n    .then(res => { // then print response status\n        console.log(res.statusText);\n    })\n}\n\nexport default UploadEventData;","import React, {Component} from \"react\";\nimport UploadEventData from \"../../services/eventUploadService\";\nimport \"./EventsFormComponent.css\";\n\nclass EventsFormComponet extends Component{\n\n    constructor(props){\n        super(props);\n        this.state =   {eventUploadObj: {}};\n        this.handleOnChange = this.handleOnChange.bind(this);\n        this.handleEvenFormSubmit = this.handleEvenFormSubmit.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n    }\n\n    handleOnChange = (e) => {\n        let { name, value} = e.target;\n        if(e.target.files){\n            value = e.target.files[0];\n        }\n        console.log( `name:: ${name} value::: ${value}`);\n        this.setState(prevState => {\n            let eventUploadObj = Object.assign({}, prevState.eventUploadObj);  \n            eventUploadObj[name] = value;\n            return { eventUploadObj };                             \n            });\n    }\n\n    handleEvenFormSubmit(e){\n        e.preventDefault();\n        console.log(this.state.eventUploadObj);\n        const data = new FormData();\n        //data.append(\"eventYear\", this.state.eventUploadObj.eventYear);\n        data.append('file', this.state.eventUploadObj.studentFile);\n        UploadEventData(data);\n    }\n\n    closeModal = () => {\n        this.props.closeModal(false);\n    }\n\n    render(){\n        return (\n            <div className= \"eventsFormModal modal\">\n                <button className=\"modal-close\" onClick={this.closeModal}> </button>\n                <form name=\"eventsUploadForm\" id=\"eventUploadForm\" onSubmit={this.handleEvenFormSubmit}>\n                    <h2> Event: { this.props.eventName} </h2>\n                    <div className=\"inputCont\">\n                        <label htmlFor=\"eventYear\"> \n                            Year\n                        </label>\n                        <input name=\"eventYear\" id=\"eventYear\" onChange={this.handleOnChange}></input>\n                        <label htmlFor=\"semester\"> \n                            Semester\n                        </label>\n                        <input name=\"eventType\" id=\"semester\" onChange={this.handleOnChange}></input>\n                    </div>\n                    <div className=\"inputCont\">\n                        <label htmlFor=\"aboutEvent\" id=\"aboutLabel\"> About Event(optional) </label>\n                        <textarea name=\"comment\" form=\"usrform\" id=\"aboutEvent\" onChange={this.handleOnChange}></textarea>\n                    </div>\n                    <div className=\"inputCont\">\n                        <label htmlFor=\"eventDate\"> \n                            Event Date\n                        </label>\n                        <input type=\"date\" name=\"eventType\" id=\"eventDate\" onChange={this.handleOnChange}></input>\n\n                        <label htmlFor=\"eventLocation\"> \n                            Event Location\n                        </label>\n                        <input name=\"eventLocation\" id=\"eventLocation\" onChange={this.handleOnChange}></input>\n                    </div>\n                    <div className=\"inputCont\">\n                        <label htmlFor=\"uploadBtn\">Upload student info(only .xlsx files allowed) </label>\n                        <input type=\"file\" id=\"uploadBtn\" name=\"studentFile\" onChange={this.handleOnChange} accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" />\n                    </div>\n                    <input type=\"submit\" className=\"submit-event\" value=\"Submit Event Info\" />\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default EventsFormComponet;","import React, {Component} from 'react';\nimport { withRouter } from 'react-router-dom';\nimport \"./EventsComponent.css\";\nimport EventsForm from \"../EventsFormComponent/EventsFormComponent\";\n\nclass Events extends Component {\n  \n  constructor(props) {\n    super(props);\n    if(this.props.location.state){\n    \tthis.state = { eventName: this.props.location.state.eventName, eventDesc: this.props.location.state.eventDesc};\n    } else {\n    \tthis.state = { eventName: \"\", showForm: false};\n    }\n    this.openEventUploadModal = this.openEventUploadModal.bind(this);\n  }\n\n  openEventUploadModal(){\n    this.setState({showForm : true});\n  }\n\n  closeModal = (showFormState) => {\n    this.setState({showForm: showFormState});\n  }\n\n  render() {\n    return <div>\n            { this.state.showForm ? <EventsForm  eventName={this.state.eventName} closeModal={this.closeModal}/> : \"\"}\n            <div className=\"event-card\">\n              <button className=\"event-btn\" onClick= { this.openEventUploadModal }>\n                <h1 className=\"event-name\"> { this.state.eventName } </h1> \n                <p className=\"event-desc\"> {this.state.eventDesc} </p>\n              </button>\n            </div>;\n          </div>\n  }\n}\n\nexport default withRouter(Events);","import React, {Component} from 'react';\nimport { BrowserRouter as Router, withRouter } from 'react-router-dom';\nimport \"./HomeComponent.css\";\n\n\nclass Home extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {value: '', desc: '', toEvent: false};\n    this.handleChange = this.handleChange.bind(this);\n    this.handleChangeDesc = this.handleChangeDesc.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n  \n  handleChangeDesc(event) {\n    this.setState({desc: event.target.value});\n  }\n\n  handleSubmit(event) {   \n  \tthis.props.history.push({\n           pathname: '/events',\n           state: { eventName: this.state.value, eventDesc: this.state.desc}\n       });\n  }\n\n  render() {\n    return (\n        <div className=\"home-cont\">\n          <h1>\n              Create Event\n          </h1>\n          <form onSubmit={this.handleSubmit}>\n            <label>\n              Enter Event name:\n              <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n            </label>\n            <label>\n              Enter Event Desc:\n              <input type=\"text\" value={this.state.desc} onChange={this.handleChangeDesc} />\n            </label>\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n        </div>\n    );\n  }\n}\n\nexport default withRouter(Home);","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route} from 'react-router-dom';\nimport HeaderComponent from \"./components/HeaderComponent/HeaderComponent\";\nimport EventsComponent from \"./components/EventsComponent/EventsComponent\";\nimport Home from \"./components/HomeComponent/HomeComponent\";\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {routeToEvents: false, eventName: \"\", eventDesc: \"\"};\n  }\n\n\n  passEventInfo(eventName, eventDesc){\n    if(eventName){\n      console.log(eventName);\n      this.setState({\n        routeToEvents: true,\n        eventName: eventName,\n        eventDesc: eventDesc\n      });\n    }\n  }\n\n  render(){\n    return (\n      <Router>\n          <HeaderComponent />\n          <Route exact path=\"/events\"> \n              <EventsComponent />\n          </Route>\n          <Route path=\"/eventHome\">\n            <Home/>\n          </Route>\n      </Router>\n    );\n  }  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}